// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/s12chung/gostatic/go/lib/router (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ContentType mocks base method
func (m *MockContext) ContentType() string {
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockContextMockRecorder) ContentType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockContext)(nil).ContentType))
}

// Log mocks base method
func (m *MockContext) Log() logrus.FieldLogger {
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logrus.FieldLogger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockContextMockRecorder) Log() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockContext)(nil).Log))
}

// Respond mocks base method
func (m *MockContext) Respond(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Respond", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond
func (mr *MockContextMockRecorder) Respond(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockContext)(nil).Respond), arg0)
}

// SetContentType mocks base method
func (m *MockContext) SetContentType(arg0 string) {
	m.ctrl.Call(m, "SetContentType", arg0)
}

// SetContentType indicates an expected call of SetContentType
func (mr *MockContextMockRecorder) SetContentType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContentType", reflect.TypeOf((*MockContext)(nil).SetContentType), arg0)
}

// SetLog mocks base method
func (m *MockContext) SetLog(arg0 logrus.FieldLogger) {
	m.ctrl.Call(m, "SetLog", arg0)
}

// SetLog indicates an expected call of SetLog
func (mr *MockContextMockRecorder) SetLog(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLog", reflect.TypeOf((*MockContext)(nil).SetLog), arg0)
}

// Url mocks base method
func (m *MockContext) Url() string {
	ret := m.ctrl.Call(m, "Url")
	ret0, _ := ret[0].(string)
	return ret0
}

// Url indicates an expected call of Url
func (mr *MockContextMockRecorder) Url() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Url", reflect.TypeOf((*MockContext)(nil).Url))
}

// UrlParts mocks base method
func (m *MockContext) UrlParts() []string {
	ret := m.ctrl.Call(m, "UrlParts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UrlParts indicates an expected call of UrlParts
func (mr *MockContextMockRecorder) UrlParts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlParts", reflect.TypeOf((*MockContext)(nil).UrlParts))
}
